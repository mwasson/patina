const HUE_LOOKUP: [[u8; 4]; 64] = [
    [0x62, 0x62, 0x62, 0xff], /* dark gray */
    [0x00, 0x1c, 0x95, 0xff],
    [0x19, 0x04, 0xac, 0xff],
    [0x42, 0x00, 0x9d, 0xff],
    [0x61, 0x00, 0x6b, 0xff],
    [0x6e, 0x00, 0x25, 0xff],
    [0x65, 0x05, 0x00, 0xff],
    [0x49, 0x1e, 0x00, 0xff],
    [0x22, 0x37, 0x00, 0xff],
    [0x00, 0x49, 0x00, 0xff],
    [0x00, 0x4f, 0x00, 0xff],
    [0x00, 0x48, 0x16, 0xff],
    [0x00, 0x35, 0x5e, 0xff],
    [0x00, 0x00, 0x00, 0xff], /* forbidden color */
    [0x00, 0x00, 0x00, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0xab, 0xab, 0xab, 0xff],
    [0x0c, 0x4e, 0xdb, 0xff],
    [0x3d, 0x2e, 0xff, 0xff],
    [0x71, 0x15, 0xf3, 0xff],
    [0x9b, 0x0b, 0xb9, 0xff],
    [0xb0, 0x12, 0x62, 0xff],
    [0xa9, 0x27, 0x04, 0xff],
    [0x89, 0x46, 0x00, 0xff],
    [0x57, 0x66, 0x00, 0xff],
    [0x23, 0x7f, 0x00, 0xff],
    [0x00, 0x89, 0x00, 0xff],
    [0x00, 0x83, 0x32, 0xff],
    [0x00, 0x6d, 0x90, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0xff, 0xff, 0xff, 0xff],
    [0x57, 0xa5, 0xff, 0xff],
    [0x82, 0x87, 0xff, 0xff],
    [0xb4, 0x6d, 0xff, 0xff],
    [0xdf, 0x60, 0xff, 0xff],
    [0xf8, 0x63, 0xc6, 0xff],
    [0xf8, 0x74, 0x6d, 0xff],
    [0xde, 0x90, 0x20, 0xff],
    [0xb3, 0xae, 0x00, 0xff],
    [0x81, 0xc8, 0x00, 0xff],
    [0x56, 0xd5, 0x22, 0xff],
    [0x3d, 0xd3, 0x6f, 0xff],
    [0x3e, 0xc1, 0xc8, 0xff],
    [0x4e, 0x4e, 0x4e, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0xff, 0xff, 0xff, 0xff],
    [0xbe, 0xe0, 0xff, 0xff],
    [0xcd, 0xd4, 0xff, 0xff],
    [0xe0, 0xca, 0xff, 0xff],
    [0xf1, 0xc4, 0xff, 0xff],
    [0xfc, 0xc4, 0xef, 0xff],
    [0xfd, 0xca, 0xce, 0xff],
    [0xf5, 0xd4, 0xaf, 0xff],
    [0xe6, 0xdf, 0x9c, 0xff],
    [0xd3, 0xe9, 0x9a, 0xff],
    [0xc2, 0xef, 0xa8, 0xff],
    [0xb7, 0xef, 0xc4, 0xff],
    [0xb6, 0xea, 0xe5, 0xff],
    [0xb8, 0xb8, 0xb8, 0xff],
    [0x00, 0x00, 0x00, 0xff],
    [0x00, 0x00, 0x00, 0xff],
];

#[derive(Debug)]
pub struct Palette {
    data: [u8; 4],
}

impl Palette {
    pub fn new(data: [u8; 4]) -> Palette {
        Palette { data }
    }

    pub fn brightness_to_pixels(&self, brightness: u8) -> &'static [u8; 4] {
        Palette::hue_lookup(self.data[brightness as usize] as usize)
    }

    /* based on Wiki values */
    pub fn hue_lookup(hue: usize) -> &'static [u8; 4] {
        &HUE_LOOKUP[hue]
    }
}

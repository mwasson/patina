#[derive(Debug)]
pub struct Palette {
    data: [u8; 4],
}

impl Palette {
    pub fn new(data: [u8; 4]) -> Palette {
        Palette { data }
    }

    pub fn brightness_to_pixels(&self, brightness: u8) -> [u8; 4] {
        let color_info = self.data[brightness as usize];

        let hue = color_info & 0x3f;
        // let value = color_info & 0xc0;

        // Palette::apply_value(value, Palette::hue_lookup(hue))
        Palette::hue_lookup(hue)
    }

    /* TODO buggy; messes up Bubble Bobble's colors */
    #[allow(dead_code)]
    fn apply_value(value: u8, pixels: [u8; 4]) -> [u8; 4] {
        /* reverse engineered from https://www.nesdev.org/wiki/NTSC_video#Converting_YUV_to_signal_RGB,
         * assuming we already have RGB values where Y = 0 and treating 'value' as the same as luma
         */
        let mut output = pixels;

        output[0] = output[0].saturating_add(((value as u16) * 255 / 4) as u8); /* R */
        output[1] = output[1].saturating_add((((value as f64) * 255.0 / 4.0) / 0.587) as u8); /* G */
        output[2] = output[2].saturating_add(((value as u16) * 255 / 4) as u8); /* B */

        output
    }

    /* based on Wiki values */
    fn hue_lookup(hue: u8) -> [u8; 4] {
        match hue {
            0x00 => [0x62, 0x62, 0x62, 0xff], /* dark gray */
            0x01 => [0x00, 0x1c, 0x95, 0xff],
            0x02 => [0x19, 0x04, 0xac, 0xff],
            0x03 => [0x42, 0x00, 0x9d, 0xff],
            0x04 => [0x61, 0x00, 0x6b, 0xff],
            0x05 => [0x6e, 0x00, 0x25, 0xff],
            0x06 => [0x65, 0x05, 0x00, 0xff],
            0x07 => [0x49, 0x1e, 0x00, 0xff],
            0x08 => [0x22, 0x37, 0x00, 0xff],
            0x09 => [0x00, 0x49, 0x00, 0xff],
            0x0a => [0x00, 0x4f, 0x00, 0xff],
            0x0b => [0x00, 0x48, 0x16, 0xff],
            0x0c => [0x00, 0x35, 0x5e, 0xff],
            0x0d => [0x00, 0x00, 0x00, 0xff], /* forbidden color */
            0x0e => [0x00, 0x00, 0x00, 0xff],
            0x0f => [0x00, 0x00, 0x00, 0xff],
            0x10 => [0xab, 0xab, 0xab, 0xff],
            0x11 => [0x0c, 0x4e, 0xdb, 0xff],
            0x12 => [0x3d, 0x2e, 0xff, 0xff],
            0x13 => [0x71, 0x15, 0xf3, 0xff],
            0x14 => [0x9b, 0x0b, 0xb9, 0xff],
            0x15 => [0xb0, 0x12, 0x62, 0xff],
            0x16 => [0xa9, 0x27, 0x04, 0xff],
            0x17 => [0x89, 0x46, 0x00, 0xff],
            0x18 => [0x57, 0x66, 0x00, 0xff],
            0x19 => [0x23, 0x7f, 0x00, 0xff],
            0x1a => [0x00, 0x89, 0x00, 0xff],
            0x1b => [0x00, 0x83, 0x32, 0xff],
            0x1c => [0x00, 0x6d, 0x90, 0xff],
            0x1d => [0x00, 0x00, 0x00, 0xff],
            0x1e => [0x00, 0x00, 0x00, 0xff],
            0x1f => [0x00, 0x00, 0x00, 0xff],
            0x20 => [0xff, 0xff, 0xff, 0xff],
            0x21 => [0x57, 0xa5, 0xff, 0xff],
            0x22 => [0x82, 0x87, 0xff, 0xff],
            0x23 => [0xb4, 0x6d, 0xff, 0xff],
            0x24 => [0xdf, 0x60, 0xff, 0xff],
            0x25 => [0xf8, 0x63, 0xc6, 0xff],
            0x26 => [0xf8, 0x74, 0x6d, 0xff],
            0x27 => [0xde, 0x90, 0x20, 0xff],
            0x28 => [0xb3, 0xae, 0x00, 0xff],
            0x29 => [0x81, 0xc8, 0x00, 0xff],
            0x2a => [0x56, 0xd5, 0x22, 0xff],
            0x2b => [0x3d, 0xd3, 0x6f, 0xff],
            0x2c => [0x3e, 0xc1, 0xc8, 0xff],
            0x2d => [0x4e, 0x4e, 0x4e, 0xff],
            0x2e => [0x00, 0x00, 0x00, 0xff],
            0x2f => [0x00, 0x00, 0x00, 0xff],
            0x30 => [0xff, 0xff, 0xff, 0xff],
            0x31 => [0xbe, 0xe0, 0xff, 0xff],
            0x32 => [0xcd, 0xd4, 0xff, 0xff],
            0x33 => [0xe0, 0xca, 0xff, 0xff],
            0x34 => [0xf1, 0xc4, 0xff, 0xff],
            0x35 => [0xfc, 0xc4, 0xef, 0xff],
            0x36 => [0xfd, 0xca, 0xce, 0xff],
            0x37 => [0xf5, 0xd4, 0xaf, 0xff],
            0x38 => [0xe6, 0xdf, 0x9c, 0xff],
            0x39 => [0xd3, 0xe9, 0x9a, 0xff],
            0x3a => [0xc2, 0xef, 0xa8, 0xff],
            0x3b => [0xb7, 0xef, 0xc4, 0xff],
            0x3c => [0xb6, 0xea, 0xe5, 0xff],
            0x3d => [0xb8, 0xb8, 0xb8, 0xff],
            0x3e => [0x00, 0x00, 0x00, 0xff],
            0x3f => [0x00, 0x00, 0x00, 0xff],
            _ => panic!("impossible hue {hue}"),
        }
    }
}
